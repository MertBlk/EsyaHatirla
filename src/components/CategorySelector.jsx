import React, { memo, useMemo, useCallback } from 'react';
import { View, Text, TouchableOpacity, ScrollView } from 'react-native';
import { getCategories, categoryIcons } from '../../src/data/items';
import { styles } from '../../src/styles/HomeScreen.styles';

const CategoryButton = memo(({ 
  category, 
  isSelected, 
  onPress, 
  isDarkMode, 
  categoryIcon 
}) => (
  <TouchableOpacity
    style={[
      styles.categoryButton,
      { backgroundColor: isDarkMode ? '#2C2E' : '#FFFFFF', 
        borderColor: isDarkMode ? '#3A3A3C' : '#E5E5EA' },
      isSelected && { backgroundColor: '#007AFF', borderColor: '#007AFF' }
    ]}
    onPress={onPress}
    accessibilityLabel={category}
    accessibilityRole="button"
    accessibilityState={{ selected: isSelected }}
    accessibilityHint={isSelected ? 
      `${category} kategorisi se√ßili, ba≈üka bir kategori se√ßmek i√ßin dokunun` : 
      `${category} kategorisini se√ßmek i√ßin dokunun`}
  >
    <Text style={[
      styles.categoryButtonText,
      { color: isDarkMode ? '#FFFFFF' : '#000000' },
      isSelected && { color: '#FFFFFF' }
    ]}>
      {categoryIcon} {category}
    </Text>
  </TouchableOpacity>
));

// Kategori ikonlarƒ± i√ßin e≈üleme tablosu
const CATEGORY_ICONS_MAP = {
  tr: { 
    'T√ºm√º': 'üóÇÔ∏è',
    'G√ºnl√ºk': 'üîë', 
    'ƒ∞≈ü/Okul': 'üìö', 
    'Spor': 'üèÄ', 
    'Seyahat': '‚úàÔ∏è', 
    'Saƒülƒ±k': 'üíä', 
    'Elektronik': 'üì±' 
  },
  en: { 
    'All': 'üóÇÔ∏è',
    'Daily': 'üîë', 
    'Work/School': 'üìö', 
    'Sports': 'üèÄ', 
    'Travel': '‚úàÔ∏è', 
    'Health': 'üíä', 
    'Electronics': 'üì±' 
  },
  default: 'üìÅ'
};

const CategorySelector = memo(({ 
  currentLanguage, 
  selectedCategory, 
  setSelectedCategory, 
  safeGetString, 
  isDarkMode 
}) => {
  // Her dil deƒüi≈üikliƒüinde g√ºncel kategorileri al
  const categories = useMemo(() => 
    getCategories(currentLanguage), 
    [currentLanguage]
  );
  
  // T√ºm√º kategori adƒ±nƒ± g√ºvenli bir ≈üekilde al
  const allCategoryName = useMemo(() => 
    safeGetString('categories.all', 'T√ºm√º'), 
    [safeGetString]
  );
  
  // Yardƒ±mcƒ± fonksiyon - kategori adƒ±na g√∂re doƒüru ikonu al
  const getCategoryIcon = useCallback((categoryName) => {
    // √ñnce doƒürudan e≈üle≈ümeyi dene
    if (categoryIcons[categoryName]) {
      return categoryIcons[categoryName];
    }
    
    // 'T√ºm√º' veya 'All' gibi √∂zel durumlar i√ßin kontrol
    if (categoryName === allCategoryName || 
        categoryName === 'T√ºm√º' || 
        categoryName === 'All') {
      return 'üóÇÔ∏è';
    }
    
    // Dil tabanlƒ± kategori ikonu al
    if (CATEGORY_ICONS_MAP[currentLanguage] && 
        CATEGORY_ICONS_MAP[currentLanguage][categoryName]) {
      return CATEGORY_ICONS_MAP[currentLanguage][categoryName];
    }
    
    // Varsayƒ±lan ikon
    return CATEGORY_ICONS_MAP.default;
  }, [currentLanguage, allCategoryName]);
  
  // Kategori se√ßme i≈üleyicisi
  const handleCategorySelect = useCallback((category) => {
    setSelectedCategory(category);
  }, [setSelectedCategory]);

  return (
    <ScrollView
      horizontal
      showsHorizontalScrollIndicator={false}
      style={styles.categoryWrapper}
      contentContainerStyle={styles.categoryScrollContent}
      accessibilityLabel="Kategori se√ßimi"
    >
      {/* Her zaman "T√ºm√º" kategori butonunu g√∂ster */}
      <CategoryButton
        category={allCategoryName}
        isSelected={selectedCategory === allCategoryName}
        onPress={() => handleCategorySelect(allCategoryName)}
        isDarkMode={isDarkMode}
        categoryIcon={getCategoryIcon(allCategoryName)}
      />

      {/* Dile √∂zg√º kategorileri g√∂ster */}
      {categories.map(category => (
        <CategoryButton
          key={category}
          category={category}
          isSelected={selectedCategory === category}
          onPress={() => handleCategorySelect(category)}
          isDarkMode={isDarkMode}
          categoryIcon={getCategoryIcon(category)}
        />
      ))}
    </ScrollView>
  );
});

export default CategorySelector;