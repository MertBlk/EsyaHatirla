import { useState, useEffect, useCallback } from "react";
import { View, Text, TextInput, TouchableOpacity, FlatList, StyleSheet, Alert, Vibration, Modal, ScrollView, StatusBar } from "react-native";
import CheckBox from '@react-native-community/checkbox';
import * as Location from 'expo-location';
import * as Notifications from 'expo-notifications';
import NetInfo from "@react-native-community/netinfo";

const HomeScreen = () => {
  const initialItems = [
    "üîë Anahtar", "üëù C√ºzdan", "üéß Kulaklƒ±k", "üì± Telefon", "üè† Ev Kartƒ±",
    "üí≥ Banka Kartƒ±", "üéüÔ∏è Toplu Ta≈üƒ±ma Kartƒ±", "üîã Powerbank", "‚åö Akƒ±llƒ± Saat",
    "üï∂Ô∏è G√ºne≈ü G√∂zl√ºƒü√º", "üö¨ Sigara / √áakmak", "üìö Defter / Kitap",
    "ü©π ƒ∞la√ß", "üß• Mont / ≈ûemsiye", "ü•§ Su ≈ûi≈üesi", "üé´ Kimlik / Pasaport",
    "üîë Araba Anahtarƒ±"
  ];

  const [items, setItems] = useState(initialItems);
  const [customItem, setCustomItem] = useState("");
  const [selectedItems, setSelectedItems] = useState([]);
  const [homeLocation, setHomeLocation] = useState(null);
  const [locationSubscription, setLocationSubscription] = useState(null);
  const [isTracking, setIsTracking] = useState(false); // State ekleyin
  const [isModalVisible, setModalVisible] = useState(false);
  const [searchQuery, setSearchQuery] = useState('');
  const [selectedCategory, setSelectedCategory] = useState('T√ºm√º');

  const categorizedItems = {
    'G√ºnl√ºk': [
      "üîë Anahtar",
      "üëù C√ºzdan",
      "üì± Telefon",
      "üîã Powerbank",
      "‚åö Akƒ±llƒ± Saat"
    ],
    'ƒ∞≈ü/Okul': [
      "üíº Laptop",
      "üìö Defter / Kitap",
      "‚úèÔ∏è Kalem",
      "üéß Kulaklƒ±k"
    ],
    'Spor': [
      "üëü Spor Ayakkabƒ±",
      "üéΩ Spor Kƒ±yafeti",
      "üß¥ Havlu",
      "ü•§ Su ≈ûi≈üesi"
    ],
    'Seyahat': [
      "üé´ Kimlik / Pasaport",
      "üß≥ Valiz",
      "üîå ≈ûarj Aleti",
      "üí≥ Banka Kartƒ±"
    ],
    'Saƒülƒ±k': [
      "ü©π ƒ∞la√ß",
      
      "üß¥ El Dezenfektanƒ±"
    ]
  };

  const categoryIcons = {
    'T√ºm√º': 'üìã',
    'G√ºnl√ºk': 'üåû',
    'ƒ∞≈ü/Okul': 'üíº',
    'Spor': 'üèÉ',
    'Seyahat': '‚úàÔ∏è',
    'Saƒülƒ±k': 'üíä'
  };

  useEffect(() => {
    checkInternetConnection();
    requestPermissions();
  }, []);

  useEffect(() => {
    const setupNotifications = async () => {
      const { status } = await Notifications.requestPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert('ƒ∞zin Hatasƒ±', 'Bildirim izni verilmedi');
        return;
      }

      await Notifications.setNotificationHandler({
        handleNotification: async () => ({
          shouldShowAlert: true,
          shouldPlaySound: true,
          shouldSetBadge: false,
        }),
      });
    };
    
    setupNotifications();
  }, []);

  useEffect(() => {
    return () => {
      if (locationSubscription) {
        locationSubscription.remove();
      }
    };
  }, [locationSubscription]);

  // homeLocation state'ini izleyen yeni bir useEffect ekleyin
  useEffect(() => {
    if (homeLocation) {
      console.log("Kaydedilen konum:", homeLocation);
      Alert.alert(
        "Ba≈üarƒ±lƒ±",
        "Ev konumunuz ba≈üarƒ±yla kaydedildi!",
        [
          {
            text: "Tamam",
            onPress: () => startLocationTracking(homeLocation)
          }
        ]
      );
    }
  }, [homeLocation]);

  // üì° ƒ∞nternet baƒülantƒ±sƒ±nƒ± kontrol et
  const checkInternetConnection = () => {
    NetInfo.fetch().then(state => {
      if (!state.isConnected) {
        Alert.alert("Baƒülantƒ± Sorunu", "L√ºtfen internet baƒülantƒ±nƒ±zƒ± kontrol edin!");
      }
    });
  };

  // üìç Kullanƒ±cƒ±nƒ±n konum izinlerini isteme
  const requestPermissions = async () => {
    try {
      const { status } = await Location.requestForegroundPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert("ƒ∞zin Hatasƒ±", "Konum izni verilmedi.");
        return false;
      }
      return true;
    } catch (error) {
      console.error("ƒ∞zin hatasƒ±:", error);
      Alert.alert("Hata", "Konum izinleri alƒ±nƒ±rken bir hata olu≈ütu.");
      return false;
    }
  };

  // üìç Kullanƒ±cƒ±nƒ±n mevcut konumunu al ve ev konumu olarak kaydet
  const saveHomeLocation = async () => {
    try {
      const permissionGranted = await requestPermissions();
      if (!permissionGranted) {
        return;
      }

      const enabled = await Location.hasServicesEnabledAsync();
      if (!enabled) {
        Alert.alert(
          "Konum Servisleri Kapalƒ±",
          "L√ºtfen cihazƒ±nƒ±zƒ±n konum servislerini a√ßƒ±n."
        );
        return;
      }

      const location = await Location.getCurrentPositionAsync({
        accuracy: Location.Accuracy.High
      });

      if (location && location.coords) {
        const { latitude, longitude } = location.coords;
        // State'i direkt olarak g√ºncelle
        setHomeLocation({ latitude, longitude });
      } else {
        throw new Error("Konum bilgisi alƒ±namadƒ±");
      }
    } catch (error) {
      console.error("Konum alma hatasƒ±:", error);
      Alert.alert(
        "Hata",
        "Konum alƒ±nƒ±rken bir hata olu≈ütu. L√ºtfen tekrar deneyin."
      );
    }
  };

  // Yeni bir fonksiyon ekleyelim
  const startLocationTracking = async (savedLocation) => {
    try {
      // savedLocation parametresini veya state'teki homeLocation'ƒ± kullan
      const locationToTrack = savedLocation || homeLocation;
      
      if (!locationToTrack) {
        Alert.alert("Hata", "√ñnce ev konumunuzu kaydetmelisiniz.");
        return;
      }

      // Eƒüer zaten takip varsa, yeni bir takip ba≈ülatmayalƒ±m
      if (locationSubscription) {
        return;
      }

      console.log("Takip ba≈ülatƒ±lƒ±yor, konum:", locationToTrack);

      const subscription = await Location.watchPositionAsync(
        {
          accuracy: Location.Accuracy.Balanced,
          timeInterval: 10000, // 10 saniyede bir kontrol et
          distanceInterval: 10, // 10 metrede bir kontrol et
        },
        (location) => {
          const { latitude, longitude } = location.coords;
          const distance = getDistanceFromLatLonInMeters(
            locationToTrack.latitude,
            locationToTrack.longitude,
            latitude,
            longitude
          );

          console.log("Mevcut mesafe:", distance);

          // 50 metre uzakla≈üƒ±nca bildirim g√∂nder
          if (distance >= 50) {
            sendNotification();
            Vibration.vibrate(1000);
          }
        }
      );

      setLocationSubscription(subscription);
      setIsTracking(true);
    } catch (error) {
      console.error("Konum takibi hatasƒ±:", error);
      Alert.alert(
        "Hata",
        "Konum takibi ba≈ülatƒ±lamadƒ±: " + (error.message || "Bilinmeyen hata")
      );
    }
  };

  // üìè ƒ∞ki nokta arasƒ±ndaki mesafeyi hesapla (Haversine Form√ºl√º)
  const getDistanceFromLatLonInMeters = (lat1, lon1, lat2, lon2) => {
    const R = 6371e3; // D√ºnya'nƒ±n yarƒ±√ßapƒ± (metre)
    const œÜ1 = (lat1 * Math.PI) / 180;
    const œÜ2 = (lat2 * Math.PI) / 180;
    const ŒîœÜ = ((lat2 - lat1) * Math.PI) / 180;
    const ŒîŒª = ((lon2 - lon1) * Math.PI) / 180; // Burasƒ± d√ºzeltildi
  
    const a = Math.sin(ŒîœÜ / 2) * Math.sin(ŒîœÜ / 2) +
             Math.cos(œÜ1) * Math.cos(œÜ2) * 
             Math.sin(ŒîŒª / 2) * Math.sin(ŒîŒª / 2);
    const c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));
  
    return R * c; // Mesafe metre cinsinden
  };

  // üì© Bildirim G√∂nder
  const sendNotification = async () => {
    try {
      const { status } = await Notifications.getPermissionsAsync();
      if (status !== 'granted') {
        Alert.alert("ƒ∞zin Hatasƒ±", "Bildirim g√∂ndermek i√ßin izin gerekiyor");
        return;
      }

      // Bildirim i√ßeriƒüini hazƒ±rla
      const notificationContent = {
        title: "E≈üyalarƒ±nƒ± Aldƒ±n mƒ±?",
        body: selectedItems && selectedItems.length > 0 
          ? `Unutma! ${selectedItems.join(', ')}` 
          : 'Hi√ß e≈üya se√ßmedin!',
        sound: 'default',
        priority: 'high',
      };

      console.log('Se√ßili e≈üyalar:', selectedItems); // Debug i√ßin log
      console.log('Bildirim i√ßeriƒüi:', notificationContent); // Debug i√ßin log

      await Notifications.setNotificationHandler({
        handleNotification: async () => ({
          shouldShowAlert: true,
          shouldPlaySound: true,
          shouldSetBadge: false,
        }),
      });

      await Notifications.scheduleNotificationAsync({
        content: notificationContent,
        trigger: null
      });

    } catch (error) {
      console.error('Bildirim hatasƒ±:', error);
      Alert.alert("Bildirim Hatasƒ±", "Bildirim g√∂nderilemedi: " + error.message);
    }
  };

  const sendAlert = async () => {
    try {
      // Titre≈üim paterni: 500ms a√ßƒ±k, 200ms kapalƒ±, 500ms a√ßƒ±k
      Vibration.vibrate([500, 200, 500]);
      
      // Sesli uyarƒ± i√ßin √∂zel ses ekleyin
      await Notifications.scheduleNotificationAsync({
        content: {
          title: "‚ö†Ô∏è Dikkat! Evden Uzakla≈üƒ±yorsun!",
          body: `${selectedItems.length} e≈üyan se√ßili. Kontrol et!`,
          sound: 'notification.wav', // √∂zel ses dosyasƒ±
          priority: 'high',
        },
        trigger: null,
      });
    } catch (error) {
      console.error('Uyarƒ± hatasƒ±:', error);
    }
  };

  const checkDistance = (distance) => {
    if (distance >= 50 && distance < 100) {
      sendAlert("ƒ∞lk Uyarƒ±: Evden uzakla≈üƒ±yorsun!");
    } else if (distance >= 100 && distance < 200) {
      sendAlert("Son Uyarƒ±: E≈üyalarƒ±nƒ± kontrol et!");
    } else if (distance >= 200) {
      sendAlert("Kritik Uyarƒ±: √áok uzakla≈ütƒ±n!");
    }
  };

  const addCustomItem = () => {
    if (customItem.trim()) {
      const newItem = customItem.trim();
      
      // Se√ßili kategoriye ekle
      if (selectedCategory !== 'T√ºm√º') {
        categorizedItems[selectedCategory] = [
          ...categorizedItems[selectedCategory],
          newItem
        ];
      } else {
        // Varsayƒ±lan olarak G√ºnl√ºk kategorisine ekle
        categorizedItems['G√ºnl√ºk'] = [
          ...categorizedItems['G√ºnl√ºk'],
          newItem
        ];
      }
      
      setCustomItem("");
      // State'i g√ºncelle
      forceUpdate({}); // Component'i yeniden render etmek i√ßin
    }
  };

  const WarningModal = () => (
    <Modal
      visible={isModalVisible}
      transparent={true}
      animationType="slide"
    >
      <View style={styles.modalContainer}>
        <Text style={styles.modalTitle}>‚ö†Ô∏è E≈üya Kontrol Listesi</Text>
        {selectedItems.map(item => (
          <View key={item} style={styles.checklistItem}>
            <Text style={styles.itemText}>{item}</Text>
            <CheckBox
              value={false}
              onValueChange={() => {}}
              tintColors={{ true: '#34C759', false: '#767577' }}
              style={styles.checkbox}
            />
          </View>
        ))}
        <TouchableOpacity 
          style={styles.confirmButton}
          onPress={() => setModalVisible(false)}
        >
          <Text style={styles.buttonText}>Kontrol Ettim</Text>
        </TouchableOpacity>
      </View>
    </Modal>
  );

  const CategorySelector = () => (
    <ScrollView horizontal showsHorizontalScrollIndicator={false} style={styles.categoryContainer}>
      <TouchableOpacity
        style={[
          styles.categoryButton,
          selectedCategory === 'T√ºm√º' && styles.selectedCategoryButton
        ]}
        onPress={() => setSelectedCategory('T√ºm√º')}
      >
        <Text style={[
          styles.categoryButtonText,
          selectedCategory === 'T√ºm√º' && styles.selectedCategoryText
        ]}>
          {categoryIcons['T√ºm√º']} T√ºm√º
        </Text>
      </TouchableOpacity>
      {Object.keys(categorizedItems).map(category => (
        <TouchableOpacity
          key={category}
          style={[
            styles.categoryButton,
            selectedCategory === category && styles.selectedCategoryButton
          ]}
          onPress={() => setSelectedCategory(category)}
        >
          <Text style={[
            styles.categoryButtonText,
            selectedCategory === category && styles.selectedCategoryText
          ]}>
            {categoryIcons[category]} {category}
          </Text>
        </TouchableOpacity>
      ))}
    </ScrollView>
  );

  const getFilteredItems = () => {
    if (selectedCategory === 'T√ºm√º') {
      return Object.values(categorizedItems).flat();
    }
    return categorizedItems[selectedCategory] || [];
  };

  const StatsCard = () => (
    <View style={styles.statsCard}>
      <View style={styles.statItem}>
        <Text style={styles.statNumber}>{selectedItems.length}</Text>
        <Text style={styles.statLabel}>Se√ßili</Text>
      </View>
      <View style={styles.statDivider} />
      <View style={styles.statItem}>
        <Text style={styles.statNumber}>{getFilteredItems().length}</Text>
        <Text style={styles.statLabel}>Toplam</Text>
      </View>
    </View>
  );

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Unutma! Yanƒ±na al:</Text>

      <CategorySelector />

      <StatsCard />

      <FlatList
        data={getFilteredItems()}
        renderItem={({ item }) => (
          <TouchableOpacity
            style={[
              styles.itemContainer,
              selectedItems.includes(item) && styles.selectedItem,
            ]}
            onPress={() =>
              setSelectedItems(prev =>
                prev.includes(item) ? prev.filter(i => i !== item) : [...prev, item]
              )
            }
          >
            <Text style={styles.itemText}>{item}</Text>
            {selectedItems.includes(item) && <Text style={styles.checkIcon}>‚úîÔ∏è</Text>}
          </TouchableOpacity>
        )}
        keyExtractor={(item, index) => item + index.toString()}
      />
      

      <TextInput
        value={customItem}
        onChangeText={setCustomItem}
        placeholder="Yeni e≈üya ekle..."
        style={styles.input}
      />

      <TouchableOpacity style={styles.addButton} onPress={addCustomItem}>
        <Text style={styles.addButtonText}>+ √úr√ºn Ekle</Text>
      </TouchableOpacity>

      <TouchableOpacity style={styles.homeButton} onPress={saveHomeLocation}>
        <Text style={styles.buttonText}>üè† Ev Konumunu Kaydet</Text>
      </TouchableOpacity>

      <WarningModal />
    </View>
  );
};

const styles = StyleSheet.create({
  // Ana container stil g√ºncellemeleri
  container: { 
    flex: 1, 
    padding: 16, 
    backgroundColor: "#F5F5F5"
  },
  
  // Ba≈ülƒ±k stil g√ºncellemeleri
  title: { 
    fontSize: 28, 
    fontWeight: "bold", 
    color: "#2C3E50",
    marginBottom: 24,
    marginTop: 12
  },

  // Kategori se√ßici stil g√ºncellemeleri
  categoryContainer: {
    marginBottom: 16,
    paddingVertical: 4,
    height: 70, // Daha k√º√ß√ºk y√ºkseklik
  },
  categoryButton: {
    width: 100, // Sabit geni≈ülik
    height: 36, // Sabit y√ºkseklik
    marginRight: 8,
    borderRadius: 18,
    backgroundColor: '#fff',
    borderWidth: 1,
    borderColor: '#E0E0E0',
    alignItems: 'center',
    justifyContent: 'center',
  },
  selectedCategoryButton: {
    backgroundColor: '#007AFF',
    borderColor: '#007AFF',
  },
  categoryButtonText: {
    fontSize: 14,
    fontWeight: '500',
    color: '#666',
  },
  selectedCategoryText: {
    color: '#fff',
    fontWeight: '600',
  },

  // E≈üya listesi stil g√ºncellemeleri
  itemContainer: { 
    flexDirection: "row", 
    alignItems: "center",
    justifyContent: "space-between", 
    padding: 16,
    borderRadius: 12,
    backgroundColor: "#fff",
    marginBottom: 10,
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 3,
  },
  selectedItem: { 
    backgroundColor: "#E8F5E9",
    borderWidth: 1,
    borderColor: "#4CAF50"
  },
  itemText: { 
    fontSize: 16,
    fontWeight: "500",
    color: "#333"
  },
  checkIcon: { 
    fontSize: 20, 
    color: "#4CAF50"
  },

  // Input ve buton stil g√ºncellemeleri
  input: { 
    backgroundColor: "#fff",
    borderWidth: 1, 
    borderColor: "#E0E0E0", 
    borderRadius: 12, 
    padding: 15,
    marginBottom: 16,
    fontSize: 16,
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 1,
    },
    shadowOpacity: 0.1,
    shadowRadius: 2,
    elevation: 2,
  },
  addButton: { 
    backgroundColor: "#007AFF",
    color: "#fff",
    padding: 16, 
    borderRadius: 12, 
    marginBottom: 12,
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.2,
    shadowRadius: 3.84,
    elevation: 5,
  },
  homeButton: { 
    backgroundColor: "#34C759", 
    padding: 16, 
    borderRadius: 12,
    shadowColor: "#000",
    shadowOffset: {
      width: 0,
      height: 2,
    },
    shadowOpacity: 0.2,
    shadowRadius: 3.84,
    elevation: 5,
  },
  buttonText: { 
    color: "#fff", 
    fontSize: 16, 
    fontWeight: "600",
    textAlign: "center"
  },
  addButtonText: { 
    color: "#fff", 
    fontSize: 16, 
    fontWeight: "600",
    textAlign: "center"
  },

  // Modal stil g√ºncellemeleri
  modalContainer: {
    flex: 1,
    backgroundColor: 'rgba(0,0,0,0.6)',
    justifyContent: 'center',
    padding: 20,
  },
  modalTitle: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#FF3B30',
    textAlign: 'center',
    marginBottom: 24,
  },
  checklistItem: {
    flexDirection: 'row',
    justifyContent: 'space-between',
    alignItems: 'center',
    padding: 16,
    backgroundColor: '#fff',
    borderRadius: 12,
    marginBottom: 12,
  },
  confirmButton: {
    backgroundColor: '#34C759',
    padding: 16,
    borderRadius: 12,
    alignItems: 'center',
    marginTop: 24,
  },

  // Stil eklemeleri
  statsCard: {
    flexDirection: 'row',
    backgroundColor: '#fff',
    borderRadius: 16,
    padding: 16,
    
    marginBottom: 16,
    shadowColor: "#000",
    shadowOffset: { width: 0, height: 2 },
    shadowOpacity: 0.1,
    shadowRadius: 4,
    elevation: 3,
  },
  statItem: {
    flex: 1,
    alignItems: 'center',
  },
  statNumber: {
    fontSize: 24,
    fontWeight: 'bold',
    color: '#007AFF',
  },
  statLabel: {
    fontSize: 14,
    color: '#666',
    marginTop: 4,
  },
  statDivider: {
    width: 1,
    backgroundColor: '#E0E0E0',
    marginHorizontal: 16,
  },
});

export default HomeScreen;